---

- name: Make sure the app dir exists and is owned by the app user
  ansible.builtin.file:
    path: "{{ rails_app_install_path }}/"
    state: directory
    owner: "{{ rails_app_user }}"

- name: Ensure rbenv versions directory is owned by the correct user
  ansible.builtin.file:
    path: "/home/{{ rails_app_user }}/.rbenv/versions/{{ ruby_version }}"
    state: directory
    owner: "{{ rails_app_user }}"
    group: "{{ rails_app_user }}"
    recurse: true
  become: true

- name: Checkout the Rails app code from source control
  ansible.builtin.git:
    repo: "{{ rails_app_git_url }}"
    dest: "{{ rails_app_install_path }}"
    version: "{{ rails_app_git_branch }}"
    recursive: true
    accept_hostkey: true
  register: git
  become: true
  become_user: "{{ rails_app_user }}"
  notify:
    - restart passenger app
    - deploy tasks
  tags:
    - rails_app

- name: Check if Bundler is already installed
  ansible.builtin.command: bash -lc 'RAILS_ENV={{ rails_app_env }} bundle --help'
  args:
    chdir: "{{ rails_app_install_path }}"
  register: bundler_present
  become: true
  become_user: "{{ rails_app_user }}"
  when: bundler_version is defined
  failed_when: false
  changed_when: bundler_present.rc != 0
  not_changed_when: bundler_present.rc == 0
  tags:
    - rails_app

- name: Optionally manage Bundler version if required
  ansible.builtin.command: bash -lc 'gem install bundler -v {{ bundler_version }}'
  when: bundler_version is defined and bundler_present.rc != 0
  not_changed_when: bundler_version is defined and bundler_present.rc == 0
  become: true
  become_user: "{{ rails_app_user }}"
  tags:
    - rails_app

- name: Ensure the .bundle directory exists
  ansible.builtin.file:
    state: directory
    path: "/home/{{ rails_app_user }}/.bundle"
    owner: "{{ rails_app_user }}"
    group: "{{ rails_app_user }}"
  become: true
  become_user: "{{ rails_app_user }}"
  tags:
    - rails_app

- name: Set Bundler config options in ~/.bundle/config
  ansible.builtin.template:
    src: bundler_config.j2
    dest: "/home/{{ rails_app_user }}/.bundle/config"
    owner: "{{ rails_app_user }}"
    group: "{{ rails_app_user }}"
  become: true
  become_user: "{{ rails_app_user }}"
  tags:
    - rails_app

- name: Set Bundler config to exclude test and development groups
  ansible.builtin.command:
    cmd: bash -lc 'bundle config set --without test development'
  become: true
  register: result
  changed_when: "'test' in result.stdout or 'development' in result.stdout"
  not_changed_when: "'test' not in result.stdout and 'development' not in result.stdout"
  become_user: "{{ rails_app_user }}"
  tags:
    - rails_app

- name: Install gem dependencies using Bundler
  ansible.builtin.command:
    cmd: bash -lc 'bundle install'
  args:
    chdir: "{{ rails_app_install_path }}"
  become: true
  become_user: "{{ rails_app_user }}"
  register: bundled
  changed_when: "'Installing' in bundled.stdout"
  not_changed_when: "'Installing' not in bundled.stdout"
  environment:
    RAILS_ENV: "{{ rails_app_env }}"
  notify:
    - restart passenger app
    - deploy yarn
    - deploy tasks
  tags:
    - rails_app

- name: Add basic Rails configuration files
  ansible.builtin.template:
    src: "{{ item }}.j2"
    dest: "{{ rails_app_install_path }}/config/{{ item }}"
  with_items: "{{ rails_app_default_config }}"
  become: true
  become_user: "{{ rails_app_user }}"
  notify:
    - restart passenger app
  tags:
    - rails_app

- name: Add additional Rails configuration files
  ansible.builtin.template:
    src: "{{ item }}.j2"
    dest: "{{ rails_app_install_path }}/config/{{ item }}"
  with_items: "{{ rails_app_additional_config }}"
  become: true
  become_user: "{{ rails_app_user }}"
  notify:
    - restart passenger app
  tags:
    - rails_app

- name: Create a .env file in the root of the app
  ansible.builtin.template:
    dest: "{{ rails_app_install_path }}/.env.local"
    src: .env.local.j2
  become: true
  become_user: "{{ rails_app_user }}"
  notify:
    - restart passenger app
  tags:
    - rails_app

- name: Check if an inventory env file exists in the app
  ansible.builtin.stat:
    path: "{{ rails_app_install_path }}/.env.{{ inventory_shortname }}"
  register: inventory_env
  changed_when: false
  tags:
    - rails_app

- name: Create symlink to inventory env file if it exists
  ansible.builtin.file:
    state: link
    src: "{{ rails_app_install_path }}/.env.{{ inventory_shortname }}"
    dest: "{{ rails_app_install_path }}/.env"
  when: inventory_env.stat.exists
  become: true
  become_user: "{{ rails_app_user }}"
  notify:
    - restart passenger app
  tags:
    - rails_app

- name: "Run the db tasks"
  ansible.builtin.include_tasks: db.yml
  when: using_postgres

- name: Trigger deploy tasks if vendor/bundle does not exist
  ansible.builtin.stat:
    path: "{{ rails_app_install_path }}/vendor/bundle"
  register: vendor_bundle
  changed_when: "vendor_bundle.stat.isdir is undefined"
  notify:
    - deploy tasks
  tags:
    - rails_app

- name: Trigger deploy tasks if public/assets does not exist
  ansible.builtin.stat:
    path: "{{ rails_app_install_path }}/public/assets"
  register: public_assets
  changed_when: "public_assets.stat.isdir is undefined"
  notify:
    - deploy tasks
  tags:
    - rails_app
