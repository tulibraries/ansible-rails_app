---

- name: Install dependencies for rbenv and Ruby
  ansible.builtin.dnf:
    name:
      - autoconf
      - automake
      - bzip2
      - bzip2-devel
      - curl
      - gcc
      - git
      - libffi-devel
      - libtool
      - libyaml-devel
      - make
      - openssl-devel
      - readline-devel
      - sqlite-devel
      - zlib-devel
    state: present

- name: Remove ruby-build plugin if it exists
  ansible.builtin.file:
    path: "/home/{{ rails_app_user }}/.rbenv/plugins/ruby-build"
    state: absent
  become: true
  changed_when: false
  tags:
    - ruby

- name: Check existing Git safe directories (lint + molecule safe)
  block:
    - name: Attempt to read safe.directory entries
      ansible.builtin.shell: |
        git config --global --get-all safe.directory || true
      args:
        _uses_shell: true
        executable: /bin/bash
      become: true
      become_user: "{{ rails_app_user }}"
      register: git_safe_dirs_cmd
      changed_when: false

    - name: Parse safe.directory output into list
      ansible.builtin.set_fact:
        git_safe_dirs: "{{ git_safe_dirs_cmd.stdout_lines | default([]) }}"

- name: Mark rbenv and ruby-build directories as safe for Git
  community.general.git_config:
    name: safe.directory
    value: "{{ item }}"
    scope: global
    state: present
  become: true
  become_user: "{{ rails_app_user }}"
  with_items:
    - "/home/{{ rails_app_user }}/.rbenv"
    - "/home/{{ rails_app_user }}/.rbenv/plugins/ruby-build"
  tags:
    - ruby

- name: Install rbenv and ruby-build plugin
  ansible.builtin.git:
    repo: "{{ item.repo }}"
    dest: "{{ item.dest }}"
    version: master
    update: false
  become_user: "{{ rails_app_user }}"
  become: true
  with_items:
    - { repo: "https://github.com/rbenv/rbenv.git", dest: "/home/{{ rails_app_user }}/.rbenv" }
    - { repo: "https://github.com/rbenv/ruby-build.git", dest: "/home/{{ rails_app_user }}/.rbenv/plugins/ruby-build" }
  tags:
    - ruby

- name: Ensure rbenv directory is owned by the correct user
  ansible.builtin.file:
    path: "/home/{{ rails_app_user }}/.rbenv"
    state: directory
    owner: "{{ rails_app_user }}"
    group: "{{ rails_app_user }}"
    mode: "0755"
    recurse: true
  become: true
  tags:
    - ruby

- name: Add rbenv initialization to profile system-wide
  ansible.builtin.template:
    src: rbenv_user.sh.j2
    dest: /etc/profile.d/rbenv.sh
    owner: root
    group: root
    mode: "0755"
  become: true

- name: Ensure .bash_profile and .bashrc are owned by the correct user
  ansible.builtin.file:
    path: "{{ item }}"
    owner: "{{ rails_app_user }}"
    group: "{{ rails_app_user }}"
    mode: "0644"
  become: true
  with_items:
    - "/home/{{ rails_app_user }}/.bash_profile"
    - "/home/{{ rails_app_user }}/.bashrc"
  tags:
    - ruby

- name: Ensure rbenv initialization in .bash_profile and .bashrc
  become: true
  tags:
    - ruby
  block:
    - name: Add rbenv initialization to .bash_profile
      ansible.builtin.lineinfile:
        path: "/home/{{ rails_app_user }}/.bash_profile"
        line: "{{ item }}"
        create: true
        state: present
      with_items:
        - 'export PATH="/home/{{ rails_app_user }}/.rbenv/bin:$PATH"'
        - 'export RBENV_ROOT="/home/{{ rails_app_user }}/.rbenv"'
        - 'eval "$(rbenv init -)"'

    - name: Add rbenv initialization to .bashrc
      ansible.builtin.lineinfile:
        path: "/home/{{ rails_app_user }}/.bashrc"
        line: "{{ item }}"
        create: true
        state: present
      with_items:
        - 'export PATH="/home/{{ rails_app_user }}/.rbenv/bin:$PATH"'
        - 'export RBENV_ROOT="/home/{{ rails_app_user }}/.rbenv"'
        - 'eval "$(rbenv init -)"'

- name: Install Ruby version using rbenv
  ansible.builtin.shell: |
    source /home/{{ rails_app_user }}/.bash_profile
    rbenv install {{ rails_app_ruby_version }} -s
    rbenv rehash
  become: true
  become_user: "{{ rails_app_user }}"
  changed_when: false
  tags:
    - ruby

- name: Check current global Ruby version
  ansible.builtin.command: >
    bash -c "source /home/{{ rails_app_user }}/.bash_profile && rbenv global"
  become_user: "{{ rails_app_user }}"
  become: true
  register: current_ruby_version
  changed_when: false

- name: Set global Ruby version if needed
  ansible.builtin.shell: |
    source /home/{{ rails_app_user }}/.bash_profile
    rbenv global {{ rails_app_ruby_version }}
    rbenv rehash
  become: true
  become_user: "{{ rails_app_user }}"
  when: current_ruby_version.stdout != rails_app_ruby_version
  changed_when: false
  tags:
    - ruby

- name: Set fact for bundler check
  ansible.builtin.command: "/home/{{ rails_app_user }}/.rbenv/shims/bundle -v"
  become_user: "{{ rails_app_user }}"
  become: true
  register: bundler_version_check
  changed_when: false
  ignore_errors: true
  tags:
    - ruby

- name: Install Bundler gem if missing or incorrect version
  ansible.builtin.command: "/home/{{ rails_app_user }}/.rbenv/shims/gem install bundler -v {{ rails_app_bundler_version }}"
  become_user: "{{ rails_app_user }}"
  become: true
  changed_when: false
  when: bundler_version_check.rc != 0
  tags:
    - ruby
