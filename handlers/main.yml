---

- name: deploy yarn
  ansible.builtin.shell: >
    bash -lc 'RAILS_ENV={{ rails_app_env }} NODE_ENV=production /usr/local/bin/yarn install --frozen-lockfile --prod'
  args:
    chdir: "{{ rails_app_install_path }}"
  become: true
  when: rails_app_use_webpack is defined and rails_app_use_webpack
  notify: deploy tasks
  tags:
    - app

- name: deploy tasks
  ansible.builtin.command: >
    bash -lc 'RAILS_ENV={{ rails_app_env }} SECRET_KEY_BASE={{ rails_app_key }} bundle exec rails {{ item }}'
  args:
    chdir: "{{ rails_app_install_path }}"
  with_items:
    - assets:clean
    - assets:precompile
  become: true
  become_user: "{{ rails_app_user }}"
  when: is_webserver 
  notify:
    - restart passenger app
    - migrate db
  tags:
    - rails_app

- name: migrate db
  ansible.builtin.command: >
    bash -lc 'RAILS_ENV={{ rails_app_env }} SECRET_KEY_BASE={{ rails_app_key }} bundle exec rails {{ item }}'
  args:
    chdir: "{{ rails_app_install_path }}"
  with_items:
    - db:migrate
  become: true
  become_user: "{{ rails_app_user }}"
  run_once: true
  when: is_webserver
  notify: restart passenger app
  tags:
    - rails_app

- name: restart passenger app
  ansible.builtin.command: >
    bash -lc 'passenger-config restart-app `pwd`'
  args:
    chdir: "{{ rails_app_install_path }}"
  become: true
  become_user: "{{ rails_app_user }}"
  when: is_webserver
  failed_when: false
  tags:
    - rails-app

- name: restart apache
  ansible.builtin.service:
    name: httpd
    state: restarted
  become: true
  when: is_webserver
  tags:
    - rails_app

- name: restart solr
  ansible.builtin.service:
    name: solr
    state: restarted
  become: true
  when: is_blacklight_app
  tags:
    - rails_app
