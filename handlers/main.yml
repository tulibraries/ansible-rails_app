---

- name: Deploy yarn
  ansible.builtin.shell: >
    bash -lc 'RAILS_ENV={{ rails_app_env }} NODE_ENV=production /usr/bin/yarn install --frozen-lockfile --prod'
  args:
    chdir: "{{ rails_app_install_path }}"
  become: true
  become_user: "{{ rails_app_user }}"
  notify: Deploy tasks
  register: yarn_result
  changed_when: "'installed' in yarn_result.stdout or 'up to date' not in yarn_result.stdout"
  when: rails_app_use_webpack is defined and rails_app_use_webpack
  tags:
    - app

- name: yarn:build
  ansible.builtin.shell: >
    bash -lc 'RAILS_ENV={{ rails_app_env }} NODE_ENV=production yarn build'
  args:
    chdir: "{{ rails_app_install_path }}"
  become: true
  become_user: "{{ rails_app_user }}"
  when: rails_app_use_webpack is defined and rails_app_use_webpack
  changed_when: false
  tags:
    - app

- name: Deploy tasks
  ansible.builtin.command: >
    bash -lc 'RAILS_ENV={{ rails_app_env }} RAILS_MASTER_KEY={{ rails_master_key }} bundle exec rails {{ item }}'
  args:
    chdir: "{{ rails_app_install_path }}"
  with_items:
    - assets:clean
    - assets:precompile
  become: true
  become_user: "{{ rails_app_user }}"
  register: deploy_result
  changed_when: "'clean' in deploy_result.stdout or 'compiled' in deploy_result.stdout"
  when: rails_app_is_webserver
  notify:
    - Restart passenger app
    - migrate db
  tags:
    - rails_app

- name: Migrate db
  ansible.builtin.command: >
  bash -lc 'RAILS_ENV={{ rails_app_env }} RAILS_MASTER_KEY={{ rails_master_key }} bundle exec rails {{ item }}'  args:
    chdir: "{{ rails_app_install_path }}"
  with_items:
    - db:migrate
  become: true
  become_user: "{{ rails_app_user }}"
  run_once: true
  register: migrate_result
  changed_when: "'migrated' in migrate_result.stdout"
  when: rails_app_is_webserver
  notify: Restart passenger app
  tags:
    - rails_app

- name: Restart passenger app
  ansible.builtin.command: >
    bash -lc 'passenger-config restart-app `pwd`'
  args:
    chdir: "{{ rails_app_install_path }}"
  become: true
  become_user: "{{ rails_app_user }}"
  register: restart_result
  changed_when: "'App restart successful' in restart_result.stdout or 'restarted' in restart_result.stdout"
  when: rails_app_is_webserver
  failed_when: false
  tags:
    - rails-app

- name: Restart apache
  ansible.builtin.service:
    name: httpd
    state: restarted
  become: true
  when: rails_app_is_webserver
  tags:
    - rails_app

- name: Restart solr
  ansible.builtin.service:
    name: solr
    state: restarted
  become: true
  when: rails_app_is_blacklight_app
  tags:
    - rails_app
